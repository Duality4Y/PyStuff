import pygame
import math
from pygame.locals import *

class Player(object):
    def __init__(self,position,fieldstartx,fieldstarty, fieldwidth,fieldheight,radius):
        self.x = position[0];
        self.y = position[1];
        self.r = radius;
        self.v = 10;
        self.dx = 0;
        self.dy = 0;
        
        self.fieldstartx = fieldstartx;
        self.fieldstarty = fieldstarty;
        self.fieldwidth = fieldwidth;
        self.fieldheight = fieldheight;
        
    def checkControls(self,keylist):
        keys = pygame.key.get_pressed();
        xw = yw = 0;
        accel = 0.5;
        
        if keys[keylist[0]] == 1:
            xw = -self.v;
        if keys[keylist[1]] == 1:
            xw = self.v;
        if keys[keylist[2]] == 1:
            yw = -self.v;
        if keys[keylist[3]] == 1:
            yw = self.v;
        
        if xw > self.dx:
            self.dx+=accel;
        if xw < self.dx:
            self.dx -= accel;
        if yw > self.dy:
            self.dy+=accel;
        if yw < self.dy:
            self.dy -= accel;
        self.dx = round(self.dx,1);
        self.dy = round(self.dy,1);
        self.x += self.dx;
        self.y += self.dy;
        self.x,self.y = self.bounderyCheck(self.x,self.y,self.r);
    def bounderyCheck(self,x,y,r):
        if x <= self.fieldstartx+r:
            x = self.fieldstartx+r;
        if x >= self.fieldwidth+self.fieldstartx-r:
            x = self.fieldwidth+self.fieldstartx-r;
        if y <= self.fieldstarty+r:
            y = self.fieldstarty+r;
        if y >= self.fieldsheight+self.fieldstarty-r:
            y = self.fieldstarty+self.fieldheight-r;
        return x,y;
    def player(self):
        #we return a tuple of the position the player is currently at.
        return (int(self.x), int(self.y));

class Projectile(object):
    def __init__(self,x,y,size,fieldstartx,fieldstarty,fieldwidth,fieldheight):
        self.x = x;
        self.y = y;
        self.r = size;
        #initial speed is 0
        self.v = 0;
        
        self.angle = 0;
        
        self.fieldstartx = fieldstartx;
        self.fieldstarty = fieldstarty;
        self.fieldwidth = fieldwidth;
        self.fieldheight = fieldheight;
    def projectile(self):
        self.move();
        return (int(self.x),int(self.y));
    def projectileAdd(self, x,y):
        dx = x-self.x;
        dy = y-self.y;
        self.angle = 0.5*math.pi+math.atan2(dy,dx);
    def projectileRemove(self):
        pass;
    def bounderyCheck(self,x,y,r):
        if x <= self.fieldstartx+r:
            x = self.fieldstartx+r;
        if x >= self.fieldwidth+self.fieldstartx-r:
            x = self.fieldwidth+self.fieldstartx-r;
        if y <= self.fieldstarty+r:
            y = self.fieldstarty+r;
        if y >= self.fieldwidth+self.fieldstartx-r:
            y = self.fieldwidth+self.fieldstartx-r;
    def move(self):
        #calculate how much we have to add to x;
        self.x+=math.sin(self.angel)*self.v;
        self.y+=math.cos(self.angle)*self.v;
        self.x,self.y = self.bounderyCheck(self.x,self.y,self.r);

#calculate distance between objects if you want lol..
#arguments must be tuples.
#could be used for collision detection between two points.
def getDistance(p1,p2):
    dx = p1[0] - p2[0];
    dy = p1[1] - p2[1];
    #calculating the delta x and y, meening, the diffrence between the two points x and y.
    #and use that to calculate the distance between, like with A^2+B^2 = C^2
    #and thus resulting in the distance between points.
    distance = round(math.sqrt((dx*dx)+(dy*dy)),0);
    return distance;

#could be used for drawing a directional line between two points, returns two tuples.
#first tuple is starting point, second tuple is end point.
def DirectionLine(p1,dx,dy):
    return (p1[0],p1[1]),(p1[0]+dx*2,p1[1]+dy*2);

"""
this might be for future use..

class Item(object):
    def __init__(self, position,direction,radius):
        self.px = position[0];
        self.py = position[1];
        self.dx = direction[0];
        self.dy = direction[1];
        self.v = math.sqrt(self.dx*self.dx+self.dy*self.dy);
        self.r = radius;

class Obstacle(object):
    def shipCollision(self, position,direction):
        return None;
    def boltCollision(self, position,direction):
        return None;

class Wall(Obstacle):
    def __init__(self,begin,end):
        self.px = begin[0];
        self.py = begin[1];
        self.dx = end[0]-begin[0];
        self.dy = end[1]-begin[1];
    def shipCollision(self, item):
        pass;
    def boltCollison(self, position,direction):
        pass;

little note for my self:
import filename
filename.class
filename.function
or:
from filename import class
then you can use it normally.
for function:
from filename import function
then just call function by name.
"""






